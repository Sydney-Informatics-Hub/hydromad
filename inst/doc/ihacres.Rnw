\documentclass[nojss,shortnames]{jss}
%% need no \usepackage{Sweave.sty}
\usepackage{amsmath}
\usepackage{tikz}

\usetikzlibrary{%
  arrows,%
  shapes.misc,% wg. rounded rectangle
  shapes.arrows,%
  chains,%
  matrix,%
  positioning,% wg. " of "
  scopes,%
  decorations.pathmorphing,%
  shadows%
}

%% custom markup
\def\ihacres{\textsc{ihacres}}
\def\Ihacres{\textsc{Ihacres}}

\title{IHACRES models in the \pkg{hydromad} package}
\Plaintitle{IHACRES models in the hydromad package}

\author{Felix Andrews}
\Plainauthor{Felix Andrews}

\Address{
  \url{http://hydromad.catchment.org/}
}

%\VignetteIndexEntry{IHACRES models in the hydromad package}
%\VignettePackage{hydromad}

\Abstract{

}
\Keywords{IHACRES, CWI, CMD, unit hydrograph}

\begin{document}

\SweaveOpts{engine=R,eps=FALSE,echo=FALSE,prefix.string=figs/ihacres}

<<preliminaries, echo=FALSE, results=hide>>=
if (!file.exists("figs")) dir.create("figs")
library(hydromad)
library(xtable)
ltheme <- col.whitebg() #canonical.theme("postscript")
ltheme$strip.background$col <- grey(7/8)
ltheme$strip.shingle$col <- grey(6/8)
ltheme$fontsize = list(text = 11)
lattice.options(default.theme = ltheme) ## set as default
ps.options(pointsize=11)
options(width=60, continue=" ")
set.seed(0)
@

\maketitle

\section{The IHACRES framework}

Models defined in the \ihacres{} framework estimate streamflow at a
catchment outlet, given inputs of areal rainfall and potential
evaporation or, more commonly, temperature data as an indicator of this.
These inputs and outputs are time series, typically at a daily
time step, and extending for many months or years.

The \ihacres{} framework defines a two-component
structure:
(1) a \emph{soil moisture accounting} (SMA) module; and
(2) a \emph{routing} or \emph{unit hydrograph} module
 (Figure \ref{fig:ihacres-framework}).
The SMA module converts rainfall and temperature into \emph{effective
  rainfall} --- the amount of rainfall which eventually reaches the
catchment outlet as streamflow (i.e. that which is not lost as evaporation etc). The
routing module converts effective rainfall into streamflow, which
amounts to defining the peak response and shape of the recession curve.
It is usually a linear transfer function, which can be as simple as a
single exponential recession (i.e. constant decay rate), although
variants with non-linearities are also available.

There are two published effective rainfall (loss) modules that are
often associated with the \ihacres{} framework, referred to
here as CWI (Catchment Wetness Index) and CMD (Catchment
Moisture Deficit), and are described in sections \ref{sec:cwi} and
\ref{sec:cmd}. However, many other models are consistent with the
framework, and implementations of some of these are included in the
\pkg{hydromad} package. 


\section{Unit Hydrograph routing}
\label{sec:routing}

The function traditionally used to model the unit hydrograph
\citep[e.g. in \ihacres{}][]{JakemanEtAl:1990} is an ARMAX
(auto-regressive, moving average, with exogenous inputs) 
type model, where the input series is denoted $U$ and the output $X$:
\begin{equation} \label{eq:armax}
X[t] = a_1 X[t-1] + \ldots + a_n X[t-n] +
       b_0 U[t-\delta] + \ldots + b_m U[t-m-\delta]
\end{equation}
The \emph{order} is denoted $(n, m)$, with delay $\delta$. The
number of parameters is $n + m + 1$.


A recommended approach is to begin with a simple first-order model,
then test whether a more complex model leads to substantial
improvement. Complex models often can not be well identified from
observed data; in this case the calibration may fail to converge, or may
converge to an invalid parameter set.

In order to examine the routing dynamics, a simple data-based method
was used to estimate effective rainfall inputs. The method assumes
effective rainfall as a fraction of rainfall is proportional to a
measure of catchment water storage (wetness). If we also assume that
catchment outflow is directly related to storage by a power law
\citep{Kirchner:2009}, then observed streamflow can be used to model
effective rainfall by raising it to a power.
This is a typical structure used in the
early stages of Data-Based Mechanistic modelling
\citep{Young:2003}. For this reason it is termed \code{dbm} in
\pkg{hydromad}.
  
To test different ARMAX model orders systematically, a convenience
function \code{tryModelOrders} is provided. This is applied to the
Queanbeyan River data in Table \ref{tab:try-model-orders}. For
increasing complexity of the auto-regressive and moving-average
components, the table shows the $R^2$ coefficient of determination, as
well as the average relative parameter error (ARPE); as model
complexity increases, typically the fit ($R^2$) improves while the
confidence in parameter estimates (ARPE) gets worse
\citep{JakemanEtAl:1990}. Young's Information Criterion (YIC) is
computed from both $R^2$ and $ARPE$ such that more negative values
indicate a reasonable compromise \citep{Young:2003} / REF?. Also shown
in Table \ref{tab:try-model-orders} is the $R^2$ of log-transformed
data, which reflects the fit of all flow levels more equally, rather
than just the peaks. The ARMAX models were estimated using the SRIV
algorithm \citep{Young:2008}.

\begin{table}[hpbt]
\begin{center}
<<try-model-orders-table, results=tex>>=
load("ihacres_tf-orders.Rdata") ## for 'summary_dbmords'
print(xtable(summary_dbmords), floating = FALSE)
@
\caption{\label{tab:try-model-orders}
  Fit and information statistics for various ARMAX transfer function
  orders estimated in the period 1990--2000 for the Queanbeyan River
  catchment. A simple data-based method was used to estimate effective
  rainfall inputs (proportional to lagged streamflow to a power, times
  rainfall). Statistics are described in the text.
}
\end{center}
\end{table}


In hydrology it is natural to decompose the transfer function into a
system of exponentially receding components, which may be in a
parallel and/or series configuration. Each component is defined by a
recession rate $\alpha$ and peak response $\beta$, or equivalently, a
time constant $\tau$ and fractional volume $v$. In this form the
parameters are physically interpretable. For further discussion, see
for example \citet{Young:2003}. The two formulations are directly
related as follows: 
\begin{align}
\tau &= -1 / \log(\alpha) \\
v &= \beta / (1 - \alpha)
\end{align}
where the time constant $\tau$ (\code{tau}) is the number of time
steps to reduce to a fraction $1/e \approx 37\%$).

If there are two components in parallel, these are conventionally
called slow ($s$) and quick ($q$) flow components. The total simulated
flow $X$ is the sum of these; $X[t] = X_s[t] + X_q[t]$, and:

\begin{align} \label{eq:expuh2}
X_s[t] &= \alpha_s X_s[t-1] + \beta_s U[t] \notag \\
X_q[t] &= \alpha_q X_q[t-1] + \beta_q U[t]
\end{align}
  
Two components might also be arranged in series rather than parallel,
in which case:

\begin{align} \label{eq:expuh2-series}
X_s[t] &= \alpha_s X_s[t-1] + \beta_s U[t] \notag \\
X[t] &= \alpha_q X[t-1] + \beta_q X_s[t]
\end{align}

In the case of three components, these are referred to as ``$s$'',
``$q$'' and ``3''; however, there is no actual requirement that one is
faster or slower than the others. Their corresponding time constants
are $\tau_s$, $\tau_q$ and $\tau_3$ (argument names \code{tau\_s,
  tau\_q, tau\_3}). There are four possible types of configuration of
three components, as shown in Figure \ref{fig:uh3-structures}.  When
using the \code{expuh} routing model in \pkg{hydromad}, the argument
\code{series} selects one of these configurations, as shown.

\begin{figure}[ht]
  \begin{center}
\tikzset{
  nonterminal/.style={
    rectangle, 
    minimum size=6mm,
    % The border:
    thick, draw,%draw=black!50,
    %top color=white,bottom color=black!20,
    text height=1.5ex,text depth=.25ex,
    join=by {->,shorten >=-1pt,
             decoration={post length=4pt}},
    font=\itshape
  },
  terminal/.style={
    rounded rectangle,
    minimum size=6mm,
    % The border:
    thick, draw,
    text height=1.5ex,text depth=.25ex,
    font=\ttfamily},
  support/.style={
    coordinate,
    join=by {->}
  },
  line join=round,line cap=round,
  every join/.style={rounded corners},
  node distance=5mm
}

\begin{tabular}{|c|c|}
  \hline
  \texttt{series = 0} & \texttt{series = 1} \\

%% series = 0: (s + q + 3)
\begin{tikzpicture}[>=latex,thick]
    \ttfamily
    \begin{scope}[start chain,
            every node/.style={on chain},
            terminal/.append style={join=by {->,shorten >=-1pt,
                                    decoration={post length=4pt}}}
        ]
        \node [coordinate]          (start)        {};
        \node [coordinate]          (before split) {};
        \node [nonterminal]         (qstore)       {"q"};
        \node [terminal]            (plus)         {+};
        \node [coordinate]          (end)          {};
    \end{scope}
    \draw (start) -- (before split);
    \node (sstore)  [nonterminal,above=of qstore,yshift=-3mm] {"s"};
    \node (3store)  [nonterminal,below=of qstore,yshift=3mm] {"3"};
    \begin{scope}[->,decoration={post length=4pt},rounded corners=2mm]
        \draw (before split)   |- (sstore);
        \draw (before split)   |- (3store);
        \draw (sstore)         -| (plus);
        \draw (3store)         -| (plus);
    \end{scope}
\end{tikzpicture}
      &
% series = 1: (s + (q * 3))
\begin{tikzpicture}[>=latex,thick]
    \ttfamily
    \begin{scope}[start chain,
            every node/.style={on chain}
        ]
        \node [coordinate]          (start)        {};
        \node [coordinate]          (before split) {};
        \node [coordinate,xshift=5mm] (between1)   {};
        \node [coordinate,xshift=8mm] (between2)   {};
        \node [terminal]            (plus)         {+};
        \node [coordinate]          (end)          {};
    \end{scope}
    \draw (start) -- (before split);
    \node (sstore)  [nonterminal,above=of between1,xshift=5mm] {"s"};
    \node (qstore)  [nonterminal,below=of between1] {"q"};
    \node (3store)  [nonterminal,below=of between2] {"3"};
    \begin{scope}[->,decoration={post length=4pt}]
        \draw (qstore)        |- (3store);
    \end{scope}
    \begin{scope}[->,decoration={post length=4pt},rounded corners=2mm]
        \draw (before split)  |- (sstore);
        \draw (before split)  |- (qstore);
        \draw (sstore)        -| (plus);
        \draw (3store)        -| (plus);
    \end{scope}
\end{tikzpicture}
      \\
      %% series = 0:
      $\mathrm{ssg} = v_s + v_q + v_3$ &
      %% series = 1:
      $\mathrm{ssg} = v_s + v_q \times v_3$ \\
      
      \hline
      \texttt{series = 2} & \texttt{series = 3} \\

% series = 2: ((s + q) * 3)
\begin{tikzpicture}[>=latex,thick]
    \ttfamily
    \begin{scope}[start chain,
            every node/.style={on chain}
        ]
        \node [coordinate]          (start)        {};
        \node [coordinate]          (before split) {};
        \node [coordinate,xshift=5mm] (between)    {};
        \node [terminal,xshift=2mm] (plus)         {+};
        \node [nonterminal]                        {"3"};
        \node [coordinate]          (end)          {};
    \end{scope}
    \draw (start) -- (before split);
    \node (sstore)  [nonterminal,above=of between] {"s"};
    \node (qstore)  [nonterminal,below=of between] {"q"};
    \begin{scope}[->,decoration={post length=4pt},rounded corners=2mm]
        \draw (before split)  |- (sstore);
        \draw (before split)  |- (qstore);
        \draw (qstore)        -| (plus);
        \draw (sstore)        -| (plus);
    \end{scope}
\end{tikzpicture}
      &
%% series = 3: (s * q * 3)
\begin{tikzpicture}[>=latex,thick,baseline=-3em]
    \ttfamily
    \begin{scope}[start chain,
            every node/.style={on chain}
        ]
        \node [support]             (start)        {};
        \node [nonterminal]                        {"s"};
        \node [nonterminal]                        {"q"};
        \node [nonterminal]                        {"3"};
        \node [support]             (end)          {};
    \end{scope}
\end{tikzpicture}
      \\
      %% series = 2:
      $\mathrm{ssg} = (v_s + v_q) \times v_3$ &
      %% series = 3:
      $\mathrm{ssg} = v_s \times v_q \times v_3$ \\
    \hline

  \end{tabular}
%    \includegraphics{ihacres_uh3-structures.pdf}
    \caption{\label{fig:uh3-structures} Possible configurations of
      third-order unit hydrograph transfer functions (i.e. three
      stores, arranged in parallel and/or series). The \code{series}
      argument to the \code{expuh} routing function selects one of
      these configurations: \code{series = 0} sets all stores in
      parallel; \code{series = 1} sets ``q'' in series with ``3'';
      \code{series = 2} sets ``3'' in series with both ``s'' and
      ``q''; and \code{series = 3} sets all stores in series. The
      steady state gain (ssg) is also shown for each case, in terms of
      the fractional throughput volumes $v$ of each store.  
    }
  \end{center}
\end{figure}

The ${\tau,v}$ formulation is implemented in the \code{expuh} routing
function. Several model structures are possible by specifying parameters:
\begin{itemize}
\item \code{(tau\_s=)}, a single exponential store.
\item \code{(v\_s=)}, a single instantaneous response.
\item \code{(tau\_s=, v\_s=)}, exponential store and instantaneous
  response in parallel. 
  The instantaneous store has volume $v_q = 1 - v_s$. 
\item \code{(tau\_s=, tau\_q=, v\_s=)}, two exponential stores in
  parallel. 
\item \code{(tau\_s=, tau\_q=, v\_s=, series=1)}, two exponential
  stores in series. 
\item \code{(tau\_s=, tau\_q=, v\_s=, v\_3=)}, two exponential stores
  and an instantaneous component in parallel. 
  Here $v_q = 1 - v_s - v_3$ and $\tau_3 = 0$.
\item \code{(tau\_s=, tau\_q=, tau\_3=, v\_s=, v\_3=)}, three stores
  in parallel. $v_q = 1 - v_s - v_3$.
\item \code{(tau\_s=, tau\_q=, tau\_3=, v\_s=, v\_3=, series=1)}, two
  stores in series and one in parallel (\code{Q * 3} in series;
  \code{+ S} in parallel). Here $v_q = 1$.
\item \code{(tau\_s=, tau\_q=, tau\_3=, v\_s=, v\_3=1, series=2)}, two
  stores in parallel and one in series (\code{S + Q} in parallel;
  \code{* 3} in series). Here $v_q = 1 - v_s$.
\item \code{(tau\_s=, tau\_q=, tau\_3=, v\_s=, v\_3=1, series=3)},
  three stores in series. Here $v_q = 1$.
\end{itemize}

Alternatively, models can be specified in $\{a, b\}$ form, like
\code{(a\_1=, a\_2=, b\_0=, b\_1=, b\_2=)}.



\subsection{Lambda Unit Hydrograph model}

An extension of the basic unit hydrograph model is also
available. Known as the \emph{lambda} form, this allows the
partitioning of flow between quick and slow components to depend on
the magnitude of effective rainfall. In this model, runoff from large
rainfall events tends to be quick flow, and runoff from small events
tends to be slow flow:

\begin{align}
  v_s[t] &= v_{s,0} U[t] ^ \lambda \qquad \text{ where } 0 \leq v_s \leq 1 \\
  v_q[t] &= 1 - v_s[t] \nonumber
\end{align}

The \code{lambda} ($\lambda$) parameter may take values between 0 and
-1, where a value of 0 corresponds to the basic model.


\subsection{Unit Hydrograph loss parameter}

To simulate loss of baseflow (e.g. infiltration to groundwater), a
constant loss rate can be specified from the slow flow component
\citep{IvkovicEtAl:2009}. If we
assume a bucket model representing the slow flow store $G$ as:

\begin{align}
  G[t] &= G[t-1] - Q_s[t] + v_s U[t] - L[t] \\
  Q_s[t] &= a G[t]
\end{align}

Defining $a = (1 / \alpha_s - 1)$ this is equivalent to a constant
term in the original model:

\begin{align}
  Q_s[t] &= Q_s[t-1] + \beta_s U[t] - (1 - \alpha_s) L[t]
\end{align}

and $L$ can be given as parameter \code{loss}.



%If we calibrate each of the four possible model structures shown in
%Figure \ref{fig:uh3-structures}, we can compare the candidate routing
%models in more hydrologically intuitive terms.  For comparison with
%the ARMAX routing procedure (Table \ref{tab:try-model-orders}), the
%same (\code{dbm}) method was used to estimate effective rainfall
%inputs.  Each routing model structure was then calibrated using the
%SCE algorithm \citep{DuanEtAl:1992}.  The results are shown in Table
%\ref{tab:expuh-structures-summ}.
%
%
%< <expuh-structures> >=
%load("expuh-structures.Rdata")  ## for 'fitstructs'
%@ 
%
%\begin{table}[hpbt]
%\begin{center}
%< <expuh-structures-summ-table, results=tex> >=
%tmp <- summary(fitstructs, with.hydrostats = FALSE)
%print(xtable(tmp), floating = FALSE)
%@
%\caption{\label{tab:expuh-structures-summ} Fit statistics for various
%  exponential-components unit hydrograph structures estimated in the
%  period 1990--2000 for the Queanbeyan River catchment.  The models
%  correspond to the four possible model structures shown in Figure
%  \ref{fig:uh3-structures}.  A simple data-based method was used to
%  estimate effective rainfall inputs (proportional to lagged streamflow to a
%  power, times rainfall). Statistics are described in the text.  
%}
%\end{center}
%\end{table}


Comment on different model structrures

Differences between ARMAX and expuh?

Choose one structure for use in the full model including soil moisture accounting.

Note other routing options -- varuh (variable partitioning); and
power law models.




\section{The CWI effective rainfall model}
\label{sec:cwi}

The first effective rainfall model for \ihacres{} incorporated an
antecedent precipitation index and was introduced by
\citet{JakemanEtAl:1990}, based on the Bedford-Ouse model of
\citet{WhiteheadEtAl:1979}. A slightly more physics-based version
based on a Catchment Wetness Index (CWI) was developed in
\citet{JakemanHornberger:1993}. It is also known as the \emph{classic}
\ihacres{} model. The version implemented here incorporates the
extensions for ephemeral catchments of \citet{YeEtAl:1997}; this has
also been slightly reformulated to make calibration easier (EMS
Software note...).  It is a metric-type model, as described by
\citet{KokkonenJakeman:2001}.  Rainfall runoff is proportional to a
soil moisture index, which is defined by an exponential smoothing of
rainfall, and the output is scaled to enforce mass balance.

\subsection{Definition}

The effective rainfall $U$ at each time step is proportional to
rainfall $P$ and a soil moisture index $s$:
\begin{equation}
U_t = c \cdot s_t \cdot P_t
\end{equation}

Two extra parameters $l$ and $p$ can be used for ephemeral rivers.
\code{l} is a moisture threshold for producing flow, and \code{p} is a
power transformation for the soil moisture index. In this case:
\begin{equation}
U_t = (c (s_t - l))^p \cdot P_t \qquad (U_t \geq 0)
\end{equation}

The soil moisture index $s$ is calculated by a filter applied to the rainfall,
where the \emph{drying rate} is referred to as $1 / \tau_{\omega,t}$:
\begin{equation}
s_t = (1 - 1 / \tau_{\omega,t}) s_{t-1} + P_t \qquad (s_t \geq 0)
\end{equation}

\subsection{Drying rate}

The drying rate $1 / \tau_{\omega,t}$ is the proportion of soil
moisture that is lost in a time step $t$.
If the drying rate is constant, this approximates an exponential smoothing
process. In this case the parameter $f$ is zero, and the drying rate
is given by the parameter $\tau_\omega$ (\code{tw}):
\begin{equation}
\tau_{\omega,t} = \tau_\omega
\end{equation}

Otherwise the drying rate depends on the input data \code{E}:
\begin{equation} \label{eq:drying-rate}
\tau_{\omega,t} = \tau_\omega \exp\left(-0.062 f (E_t - T_{\mathrm{ref}})\right)
\end{equation}

Note that $E_t$ in Equation \ref{eq:drying-rate} has
a \emph{reference temperature} $T_{\mathrm{ref}}$ (\code{t\_ref}) subtracted from
it\footnote{\code{t\_ref} is not a parameter; changing it is equivalent
 to transforming \code{tw}}. This defaults to a value of
20, but it is recommended to set it to 3 when using potential
evaporation data as \code{E}.

The parameter $\tau_\omega$ (\code{tw}) defines the \emph{drying rate at the
reference temperature}, while parameter $f$ defines the degree of
\emph{temperature dependence of the drying rate}.
The effect of these parameters is shown in Figure \ref{fig:cwi-drying-rate}.

\begin{figure}[hbpt]
\begin{center}
\setkeys{Gin}{width=5.5in}
<<cwi-drying-rate, fig=TRUE, width=5.5, height=4>>=
dryrate <- function(E, tw, f, t_ref=20) {
	#tw <- exp(0.062 * t_ref * f) * tw
	tw_k <- tw * exp(-0.062 * f * (E - t_ref))
	tw_k <- pmax(tw_k, 1)
	1 / tw_k
}
cwidat <- expand.grid(E=seq(0,32,by=1), tw=c(2,4,8,16,32), f=seq(0,2,by=0.5))
cwidat$dryrate <- with(cwidat, mapply(dryrate, E=E, tw=tw, f=f))
cwidat$tw <- factor(cwidat$tw)
cwidat$f <- factor(cwidat$f)
foo <- xyplot(dryrate ~ E | tw * f, cwidat, type = "l", lwd = 2,
              ylab = "drying rate (fraction lost per time step)",
              xlab = "E (temperature or PET data)",
              panel = function(x, y, ...) {
                  panel.xyplot(x, y, ...)
                  panel.points(20, y[x==20], pch = 16)
              },
              scales = list(y = list(at = c(0, 0.5, 1))))
library(latticeExtra)
print(useOuterStrips(foo,
   strip = strip.custom(var.name = expression(tau[omega]), strip.names = TRUE, sep=" = "),
   strip.left = strip.custom(strip.names = TRUE, sep=" = ", horizontal = FALSE)))
@

\caption{\label{fig:cwi-drying-rate}
  Drying rate function in the \ihacres{} CWI model,
  showing effects of parameters \code{tw} and \code{f}.
  Here the \emph{reference temperature} \code{t\_ref} is 20 (the
  default value), shown as a dot.
}
\end{center}
\end{figure}



\section{The CMD effective rainfall model}
\label{sec:cmd}

The Catchment Moisture Deficit (CMD) effective rainfall model for
\ihacres{} was introduced by \citet{EvansJakeman:1998} and
substantially revised by \citet{CrokeJakeman:2004}. It is a
conceptual-type model, as described by
\citet{KokkonenJakeman:2001}. Rainfall is partitioned explicitly into
drainage, evapo-transpiration, and changes in catchment moisture storage.

\subsection{Definition}

Catchment Moisture Deficit $M$ represents the dryness of a catchment,
in terms of the volume of water needed to reach a \emph{saturation} level
(at $M=0$). It is given in the same units as rainfall per timestep,
typically mm.

The mass balance step is:
\begin{equation}
M[t] = M[t-1] - P[t] + E_T[t] + U[t]
\end{equation}

where $M$ represents catchment moisture deficit,
constrained below by 0,
P is catchment areal rainfall, $E_T$ is evapo-transpiration, and
U is drainage (effective rainfall).

Rainfall effectiveness (i.e. proportion of rain that drains to the stream) is
a simple \emph{instantaneous} function of the CMD, with a threshold at $M
= d$. For this reason \code{d} can be called the \emph{CMD threshold for
  producing flow}.
\begin{equation} \label{eq:dUdP}
\frac{\mathrm{d}U}{\mathrm{d}P} = 1 - \min(1, M/d)
\end{equation}

The actual drainage from rainfall input each time step involves the integral of Equation \ref{eq:dUdP};
see \citet{CrokeJakeman:2004}.
%The actual drainage is calculated according to the function:

<<cmd-drainage-fun, echo=FALSE, results=hide>>=
drainage <- function(M, P, d) {
    extraP <- P - max(0, M - d)
    if (extraP <= 0) {
        Mf <- M - P
        U <- 0
    } else {
        Mf <- min(M, d) * exp(-extraP / d)
        U <- P - (M - Mf)
    }
    U/P
}
@

<<cmd-drainage-fun2, echo=FALSE, results=hide>>=
drainage2 <- function(M, P, d) {
	Mf <- if (M < d) M * exp(-P / d)
		else if (M < d+P) d * exp((-P+M-d)/d)
		else M - P
	dM <- Mf - M
	U <- P - (-dM)
	U/P
}
@

\begin{figure}[hbpt]
\begin{center}
\setkeys{Gin}{width=5.5in}
<<cmd-drainage, fig=TRUE, width=5.5, height=2.5>>=
dU_dP <- function(M, d) 1 - min(1, M/d)
cmdu <- expand.grid(M = seq(0, 500, by = 5),
                    d = seq(50, 400, length = 3))
cmdu$U_P <- with(cmdu, mapply(drainage, M=M, d=d, P=100))
cmdu$dU_dP <- with(cmdu, mapply(dU_dP, M=M, d=d))
foo <- xyplot(dU_dP + U_P ~ M | factor(d), data = cmdu, type = "l",
	strip = strip.custom(var.name = "d", sep = " = ", strip.names = TRUE),
        as.table = TRUE, aspect = 1,
        ylab = "runoff proportion",
	xlab = "CMD (catchment moisture deficit) state, mm",
	par.settings = list(superpose.line = list(lwd = 2)),
	auto.key = list(text = expression(dU / dP, (U / P)[P==100]),
                        lines = TRUE, points = FALSE, space = "right"))
print(foo)
@
\caption{\label{fig:cmdufun}
  Discharge function of \ihacres{} CMD model,
  showing effect of parameter \code{d}.
  The line marked $dU/dP$ is the instantaneous rate of runoff;
  whereas $(U/P)_{P=100}$ is the actual runoff proportion from 100mm of rainfall.
}
\end{center}
\end{figure}

Evapo-transpiration (as a proportion of the potential rate, \code{E[t]})
is also a simple function of the CMD, with a threshold at $M = f
d$. Parameter $f$ is known as the \emph{stress threshold}\footnote{This $f$ is not to be confused with the
  unrelated parameter $f$ in the CWI model.}. It is
given as a proportion of the \emph{flow threshold} \code{d}, in order
to reduce covariance of these parameters. Parameter
\code{e} simply scales the result, and is known as the
\emph{temperature to PET conversion factor}.
\begin{equation}
E_T[t] = e E[t] \min(1, \exp\left(2\left(1 - \frac{M_f}{fd}\right)\right))
\end{equation}

\begin{figure}[hbpt]
\begin{center}
\setkeys{Gin}{width=4.8in}
<<cmd-evap, fig=TRUE, width=4.8, height=2.5>>=
evap <- function(M, f, d=400) {
	g <- f * d
	min(1, exp(2 * (1 - M/g)))
}
cmde <- expand.grid(M = seq(0, 500, by = 5),
                    f = seq(0.1, 0.5, by = 0.2))
cmde$evap <- with(cmde, mapply(evap, M = M, f = f))
foo <- xyplot(evap ~ M | factor(f), data = cmde, type = "l", lwd = 2,
        strip = strip.custom(var.name = "f", sep=" = ", strip.names = TRUE),
        as.table = TRUE, aspect = 1,
	ylab="evaporation as fraction\n of potential (ET / PET)",
	xlab="CMD (catchment moisture deficit) state, mm")
print(foo)
@
\caption{\label{fig:cmdefun}
  Evapo-transpiration function of \ihacres{} CMD model,
  showing effect of parameter \code{f}.
  Here the threshold parameter \code{d} is fixed at 400.
}
\end{center}
\end{figure}

Note that the evapo-transpiration calculation is based on $M_f$,
which is the CMD \emph{after} precipitation and drainage have been
accounted for (as in the \code{drainage} function above).


\bibliography{hydromad}


\end{document}


